/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import entidades.Documental;
import entidades.Pelicula;
import entidades.Seri;
import entidades.Serie;
import entidades.Video;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static presentacion.MenuEmpleado.tabla;
import utilidadaes.Utilidad;

/**
 *
 * @author siviany
 */
public class MenuVideo extends javax.swing.JFrame {

    public static DefaultTableModel tabla = new DefaultTableModel();

    /**
     * Creates new form MenuVideo
     */
    public MenuVideo() {
        try {
            tabla.setColumnCount(0); //para limpiar los datos de la tabla columnas
            tabla.setRowCount(0);
            initComponents();
            setLocationRelativeTo(null);
            cargarTitulosColumas();
            cargarDatosPeliculas();
            cargarDatosDocumental();
            cargarDatosSeries();
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        Jtxt6 = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        cantidad = new javax.swing.JTextField();
        temporadas = new javax.swing.JTextField();
        secuelas = new javax.swing.JTextField();
        categoria = new javax.swing.JTextField();
        limpiar = new javax.swing.JButton();
        agregar = new javax.swing.JButton();
        mostrar = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        volver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jScrollPane1.setViewportView(jScrollPane2);

        jLabel1.setText("Tipo de video");

        jLabel2.setText("Nombre");

        jLabel3.setText("Cantidad");

        jLabel4.setText("Temporadas");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Pelicula", "Serie", "Documental" }));

        jLabel5.setText("Secuelas");

        Jtxt6.setText("Categoria");

        nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreActionPerformed(evt);
            }
        });

        cantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cantidadKeyTyped(evt);
            }
        });

        temporadas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                temporadasKeyTyped(evt);
            }
        });

        secuelas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                secuelasKeyTyped(evt);
            }
        });

        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        agregar.setText("Nuevo Video");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        mostrar.setText("Mostrar");
        mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarActionPerformed(evt);
            }
        });

        modificar.setText("Modificar");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });

        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        volver.setText("Volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(agregar)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(Jtxt6)
                            .addGap(32, 32, 32))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(categoria, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(secuelas, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(temporadas, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(mostrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(limpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(volver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(agregar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(temporadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mostrar)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secuelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limpiar)
                    .addComponent(modificar))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Jtxt6)
                    .addComponent(cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volver)
                    .addComponent(eliminar))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreActionPerformed

    private void mostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarActionPerformed
        boolean mesajeNoExiste = true;
        if (nombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese un nombre de pelicula para mostrar ");
        } else {
            switch (this.combo.getSelectedIndex()) {
                case 0:
                    JOptionPane.showMessageDialog(null, "Elija el tipo de video ");
                    break;
                case 1:
                    Pelicula peli = new Pelicula();
                    for (int i = 0; i < peli.getListaPeliculas().size(); i++) {
                        if (peli.getListaPeliculas().get(i).getNombre().equalsIgnoreCase(this.nombre.getText())) {
                            this.combo.setSelectedItem(peli.getListaPeliculas().get(i).getTipoVideo());
                            this.nombre.setText(peli.getListaPeliculas().get(i).getNombre());
                            this.cantidad.setText(Integer.toString(peli.getListaPeliculas().get(i).getCantidad()));
                            this.secuelas.setText(Integer.toString(peli.getListaPeliculas().get(i).getSecuelas()));
                            mesajeNoExiste = false;
                        }
                    }
                    if (mesajeNoExiste) {
                        JOptionPane.showMessageDialog(null, "El nombre indicado no existe");
                    }
                    break;
                case 2:
                    Serie serie = new Serie();
                    for (int i = 0; i < serie.getListaSeries().size(); i++) {
                        if (serie.getListaSeries().get(i).getNombre().equalsIgnoreCase(this.nombre.getText())) {
                            this.combo.setSelectedItem(serie.getListaSeries().get(i).getTipoVideo());
                            this.nombre.setText(serie.getListaSeries().get(i).getNombre());
                            this.cantidad.setText(Integer.toString(serie.getListaSeries().get(i).getCantidad()));
                            this.temporadas.setText(Integer.toString(serie.getListaSeries().get(i).getNumeroTemporadas()));
                            mesajeNoExiste = false;
                        }
                    }
                    if (mesajeNoExiste) {
                        JOptionPane.showMessageDialog(null, "El nombre indicado no existe");
                    }
                    break;
                case 3:
                    Documental docu = new Documental();
                    for (int i = 0; i < docu.getListaDocumental().size(); i++) {
                        if (docu.getListaDocumental().get(i).getNombre().equalsIgnoreCase(this.nombre.getText())) {
                            this.combo.setSelectedItem(docu.getListaDocumental().get(i).getTipoVideo());
                            this.nombre.setText(docu.getListaDocumental().get(i).getNombre());
                            this.cantidad.setText(Integer.toString(docu.getListaDocumental().get(i).getCantidad()));
                            this.categoria.setText((docu.getListaDocumental().get(i).getCategoria()));
                            mesajeNoExiste = false;
                        }
                    }
                    if (mesajeNoExiste) {
                        JOptionPane.showMessageDialog(null, "El nombre indicado no existe");
                    }
                    break;
                default:
                    throw new AssertionError();
            }
        }
    }//GEN-LAST:event_mostrarActionPerformed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed

        boolean nombreExiste = false;
        switch (combo.getSelectedIndex()) {
            case 0:
                JOptionPane.showMessageDialog(null, "Elija el tipo de video ");
            case 1:
                if (nombre.getText().isEmpty() || cantidad.getText().isEmpty() || secuelas.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Ingrese todos los datos");
                } else {
                    Pelicula pelicula1 = new Pelicula();
                    for (int i = 0; i < pelicula1.getListaPeliculas().size(); i++) {
                        if (pelicula1.getListaPeliculas().get(i).getNombre().equalsIgnoreCase(this.nombre.getText())) {
                            nombreExiste = true;
                        }
                    }
                    if (nombreExiste) {
                        JOptionPane.showMessageDialog(null, "El nombre ya existe");
                    } else {
                        Pelicula peli = new Pelicula(Integer.parseInt(this.secuelas.getText()), (String) this.combo.getSelectedItem(),
                                this.nombre.getText(), Integer.parseInt(this.cantidad.getText()));
                        peli.agregarDatosLista(peli);
                    }
                }
                break;
            case 2:
                if (nombre.getText().isEmpty() || cantidad.getText().isEmpty() || temporadas.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Ingrese todos los datos");
                } else {
                    Serie serie1 = new Serie();
                    for (int i = 0; i < serie1.getListaSeries().size(); i++) {
                        if (serie1.getListaSeries().get(i).getNombre().equalsIgnoreCase(this.nombre.getText())) {
                            nombreExiste = true;
                        }
                    }
                    if (nombreExiste) {
                        JOptionPane.showMessageDialog(null, "El nombre ya existe");
                    } else {
                        Serie serie = new Serie(Integer.parseInt(this.temporadas.getText()), (String) this.combo.getSelectedItem(),
                                this.nombre.getText(), Integer.parseInt(this.cantidad.getText()));
                        serie.agregarDatosLista(serie);
                    }
                }
                break;
            case 3:
                if (nombre.getText().isEmpty() || cantidad.getText().isEmpty() || categoria.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Ingrese todos los datos");
                } else {
                    Documental docu1 = new Documental();
                    for (int i = 0; i < docu1.getListaDocumental().size(); i++) {
                        if (docu1.getListaDocumental().get(i).getNombre().equalsIgnoreCase(this.nombre.getText())) {
                            nombreExiste = true;
                        }
                    }
                    if (nombreExiste) {
                    } else {
                        Documental docu = new Documental(this.categoria.getText(), (String) this.combo.getSelectedItem(),
                                this.nombre.getText(), Integer.parseInt(this.cantidad.getText()));
                        JOptionPane.showMessageDialog(null, "El nombre ya existe");
                        docu.agregarDatosLista(docu);
                    }
                }
                break;
        }
        tabla.setColumnCount(0); //para limpiar los datos de la tabla columnas
        tabla.setRowCount(0); //para limpiar los datos de la tabla filas
        cargarTitulosColumas();
        cargarDatosPeliculas();
        cargarDatosDocumental();
        cargarDatosSeries();
    }//GEN-LAST:event_agregarActionPerformed

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        boolean mensajeNoExiste = true;
        if (nombre.getText().equals("") || combo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Ingrese tipo de video y nombre");
        } else {
            switch (this.combo.getSelectedIndex()) {
                case 1:
                    if (nombre.getText().isEmpty() || cantidad.getText().isEmpty() || secuelas.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Ingrese todos los datos");
                    } else {
                        Pelicula peli = new Pelicula();
                        for (int i = 0; i < peli.getListaPeliculas().size(); i++) {
                            if (peli.getListaPeliculas().get(i).getNombre().equalsIgnoreCase(this.nombre.getText())) {
                                ArrayList<String> lista = new ArrayList<>();
                                lista.add((String) this.combo.getSelectedItem());
                                lista.add(this.nombre.getText());
                                lista.add(this.cantidad.getText());
                                lista.add(this.secuelas.getText());
                                peli.modificarDatosLista(lista);
                                mensajeNoExiste = false;
                            } 
                        }
                    }
                    break;
                case 2:
                    if (nombre.getText().isEmpty() || cantidad.getText().isEmpty() || temporadas.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Ingrese todos los datos");
                    } else {
                        Serie serie = new Serie();
                        for (int i = 0; i < serie.getListaSeries().size(); i++) {
                            if (serie.getListaSeries().get(i).getNombre().equalsIgnoreCase(this.nombre.getText())) {
                                ArrayList<String> lista = new ArrayList<>();
                                lista.add((String) this.combo.getSelectedItem());
                                lista.add(this.nombre.getText());
                                lista.add(this.cantidad.getText());
                                lista.add(this.temporadas.getText());
                                serie.modificarDatosLista(lista);
                                mensajeNoExiste = false;
                            } 
                        }
                    }
                    break;
                case 3:
                    if (nombre.getText().isEmpty() || cantidad.getText().isEmpty() || categoria.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Ingrese todos los datos");
                    } else {
                        Documental docu = new Documental();
                        for (int i = 0; i < docu.getListaDocumental().size(); i++) {
                            if (docu.getListaDocumental().get(i).getNombre().equalsIgnoreCase(this.nombre.getText())) {
                                ArrayList<String> lista = new ArrayList<>();
                                lista.add((String) this.combo.getSelectedItem());
                                lista.add(this.nombre.getText());
                                lista.add(this.cantidad.getText());
                                lista.add(this.temporadas.getText());
                                docu.modificarDatosLista(lista);
                                mensajeNoExiste = false;
                            } 
                        }
                    }
                    break;
            }
            if (mensajeNoExiste) {
                JOptionPane.showMessageDialog(null, "El nombre no existe o lo escribio mal");
            }
            tabla.setColumnCount(0); //para limpiar los datos de la tabla columnas
            tabla.setRowCount(0); //para limpiar los datos de la tabla filas
            cargarTitulosColumas();
            cargarDatosPeliculas();
            cargarDatosDocumental();
            cargarDatosSeries();
        }
    }//GEN-LAST:event_modificarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        if (nombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese el nombre");
        } else {
            switch (this.combo.getSelectedIndex()) {
                case 0:
                    JOptionPane.showMessageDialog(null, "Ingrese el tipo de video");
                    break;
                case 1:
                    Pelicula peli = new Pelicula();
                    peli.eliminarDatosLista(nombre.getText());
                    break;
                case 2:
                    Serie serie = new Serie();
                    serie.eliminarDatosLista(nombre.getText());
                    break;
                case 3:
                    Documental docu = new Documental();
                    docu.eliminarDatosLista(nombre.getText());
                    break;
            }
        }
        tabla.setColumnCount(0); //para limpiar los datos de la tabla columnas
        tabla.setRowCount(0); //para limpiar los datos de la tabla filas
        cargarTitulosColumas();
        cargarDatosPeliculas();
        cargarDatosDocumental();
        cargarDatosSeries();
    }//GEN-LAST:event_eliminarActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_limpiarActionPerformed

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        Seri x = new Seri();
        x.agregarTxt(Pelicula.listaPeliculas, "peliculas.txt");
        x.agregarTxt(Serie.listaSeries, "series.txt");
        x.agregarTxt(Documental.listaDocumental, "documentales.txt");
        Principal principal = new Principal();
        principal.setVisible(true);
        dispose();
    }//GEN-LAST:event_volverActionPerformed

    private void cantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidadKeyTyped
        Utilidad.noPermiteTexto(evt);
    }//GEN-LAST:event_cantidadKeyTyped

    private void temporadasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_temporadasKeyTyped
        Utilidad.noPermiteTexto(evt);
    }//GEN-LAST:event_temporadasKeyTyped

    private void secuelasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_secuelasKeyTyped
        Utilidad.noPermiteTexto(evt);
    }//GEN-LAST:event_secuelasKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuVideo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Jtxt6;
    private javax.swing.JButton agregar;
    private javax.swing.JTextField cantidad;
    private javax.swing.JTextField categoria;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JButton eliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton modificar;
    private javax.swing.JButton mostrar;
    private javax.swing.JTextField nombre;
    private javax.swing.JTextField secuelas;
    private javax.swing.JTextField temporadas;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
    public void cargarTitulosColumas() {
        tabla.addColumn("Tipo Video");
        tabla.addColumn("Nombre");
        tabla.addColumn("Cantidad");
        tabla.addColumn("Secuelas");
        tabla.addColumn("Temporadas");
        tabla.addColumn("Categorias");
        jTable1.setModel(tabla);
    }

    public void cargarDatosPeliculas() {
        Pelicula peli = new Pelicula();
        for (int i = 0; i < peli.getListaPeliculas().size(); i++) {
            ArrayList<String> datos = new ArrayList<>();
            datos.add(peli.getListaPeliculas().get(i).getTipoVideo());
            datos.add(peli.getListaPeliculas().get(i).getNombre());
            datos.add(Integer.toString(peli.getListaPeliculas().get(i).getCantidad()));
            datos.add(Integer.toString(peli.getListaPeliculas().get(i).getSecuelas()));
            tabla.addRow(datos.toArray());
        }
    }

    public void cargarDatosSeries() {
        Serie serie = new Serie();
        for (int i = 0; i < serie.getListaSeries().size(); i++) {
            ArrayList<String> datos = new ArrayList<>();
            datos.add(serie.getListaSeries().get(i).getTipoVideo());
            datos.add(serie.getListaSeries().get(i).getNombre());
            datos.add(Integer.toString(serie.getListaSeries().get(i).getCantidad()));
            datos.add("");
            datos.add(Integer.toString(serie.getListaSeries().get(i).getNumeroTemporadas()));
            tabla.addRow(datos.toArray());
        }
    }

    public void cargarDatosDocumental() {
        Documental docu = new Documental();
        for (int i = 0; i < docu.getListaDocumental().size(); i++) {
            ArrayList<String> datos = new ArrayList<>();
            datos.add(docu.getListaDocumental().get(i).getTipoVideo());
            datos.add(docu.getListaDocumental().get(i).getNombre());
            datos.add(Integer.toString(docu.getListaDocumental().get(i).getCantidad()));
            datos.add("");
            datos.add("");
            datos.add(docu.getListaDocumental().get(i).getCategoria());
            tabla.addRow(datos.toArray());
        }
    }

    public void limpiar() {
        this.nombre.setText(null);
        this.combo.setSelectedIndex(0);
        this.cantidad.setText(null);
        this.secuelas.setText(null);
        this.temporadas.setText(null);
        this.categoria.setText(null);
    }

}
